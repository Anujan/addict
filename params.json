{"name":"Addict","tagline":"User registration lib for Phoenix Framework","body":"# Addict v0.0.4\r\n\r\nAddict allows you to manage users authentication on your [Phoenix Framework](http://www.phoenixframework.org) app easily.\r\n\r\n## What does it?\r\nFor now, it enables your users to register, login, logout and recover/reset their passwords.\r\n\r\n## On what does it depend?\r\nAddict depends on:\r\n- [Phoenix Framework](http://www.phoenixframework.org)\r\n- [Ecto](https://github.com/elixir-lang/ecto)\r\n- [Mailgun](https://mailgun.com) (Don't have an account? Register for free and get 10000 e-mails per month included)\r\n\r\n## How can I get it started?\r\n\r\nAddict is dependent on an ecto [User Model](https://github.com/elixir-lang/ecto/blob/master/examples/simple/lib/simple.ex#L18) and a [Database connection interface](https://github.com/elixir-lang/ecto/blob/master/examples/simple/lib/simple.ex#L12).\r\n\r\nThe user model must have at least the following schema:\r\n```\r\n  id serial primary key,\r\n  email varchar(200),\r\n  username varchar(200),\r\n  hash varchar(130),\r\n  recovery_hash varchar(130),\r\n  CONSTRAINT u_constraint UNIQUE (email)\r\n```\r\n\r\nThere are some application configurations you must add to your `configs.ex`:\r\n\r\n```elixir\r\nconfig :addict, not_logged_in_url: \"/error\",  # the URL where users will be redirected to\r\n                db: MyApp.MyRepo,\r\n                user: MyApp.MyUser,\r\n                register_from_email: \"Registration <welcome@yourawesomeapp.com>\", # email registered users will receive from address\r\n                register_subject: \"Welcome to yourawesomeapp!\", # email registered users will receive subject\r\n                password_recover_from_email: \"Password Recovery <no-reply@yourawesomeapp.com>\",\r\n                password_recover_subject: \"You requested a password recovery link\",\r\n                email_templates: MyApp.MyEmailTemplates, # email templates for sending e-mails, more on this further down\r\n                mailgun_domain: \"yourawesomeapp.com\",\r\n                mailgun_key: \"apikey-secr3tzapik3y\"\r\n```\r\n\r\nThe `email_templates` configuration should point to a module with the following structure:\r\n```elixir\r\ndefmodule MyApp.MyEmailTemplates do\r\n  def register_template(user) do\r\n    \"\"\"\r\n      <h1>This is the HTML the user will receive upon registering</h1>\r\n      You can access the user attributes: #{user.email}\r\n    \"\"\"\r\n  end\r\n\r\n  def password_recovery_template(user) do\r\n    \"\"\"\r\n      <h1>This is the HTML the user will receive upon requesting a new password</h1>\r\n      You should provide a link to your app where the token will be processed:\r\n      <a href=\"http://yourawesomeapp.com/recover_password?token=#{user.recovery_hash}\">like this</a>\r\n    \"\"\"\r\n  end\r\nend\r\n```\r\n\r\n## How can I use it?\r\nJust add the following to your `router.ex`:\r\n```elixir\r\n    post \"/register\", Addict.Controller, :register # required params: email, password, username\r\n    post \"/logout\", Addict.Controller, :logout\r\n    post \"/login\", Addict.Controller, :login # required params: email, password\r\n    post \"/recover_password\", Addict.Controller, :recover_password # required params: email\r\n    post \"/reset_password\", Addict.Controller, :reset_password # required params: token, password, password_confirmation\r\n```\r\n\r\n\r\n\r\nAnd use `Addict.Plugs.Authenticated` plug to validate requests on your controllers:\r\n```elixir\r\ndefmodule MyAwesomeApp.PageController do\r\n  use Phoenix.Controller\r\n\r\n  plug Addict.Plugs.Authenticated when action in [:foobar]\r\n  plug :action\r\n\r\n  def foobar(conn, _params) do\r\n    render conn, \"index.html\"\r\n  end\r\n\r\nend\r\n```\r\n\r\nIf the user is not logged in and requests for the above action, it will be redirected to `not_logged_in_url`.","google":"UA-59493371-1","note":"Don't delete this file! It's used internally to help with page regeneration."}